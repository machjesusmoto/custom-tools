#!/usr/bin/env bash
# claude_exit_routine.sh - Comprehensive exit routine for Claude sessions
# Version: 1.0.0
# Last Updated: August 15, 2025
# Purpose: Export session, sync docs, and prepare for clean exit or compaction

set -euo pipefail

# Configuration
OBSIDIAN_VAULT="${HOME}/Obsidian"
OBSIDIAN_SESSIONS="${OBSIDIAN_VAULT}/AI Sessions/Claude"
EXPORT_DIR="${OBSIDIAN_SESSIONS}/$(date +%Y-%m)"
SESSION_FILE="${EXPORT_DIR}/$(date +%Y-%m-%d-%H%M)-exit-session.md"
SUMMARY_FILE="${HOME}/.last_claude_session.md"
MCP_SERVER_PATH="${HOME}/ai-tools/obsidian-mcp-server"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Session tracking
SESSION_START="${SESSION_START:-$(date -d '2 hours ago' '+%Y-%m-%d %H:%M')}"
SESSION_END="$(date '+%Y-%m-%d %H:%M')"

# Functions
log() {
    echo -e "${GREEN}[EXIT]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${CYAN}✓${NC} $1"
}

# Create session export
create_session_export() {
    log "Creating session export..."
    
    # Ensure export directory exists
    mkdir -p "$EXPORT_DIR"
    
    # Gather session metrics
    local tasks_completed=$(grep -c "completed" ~/.claude_tasks.log 2>/dev/null || echo "0")
    local files_modified=$(find . -type f -mmin -120 2>/dev/null | wc -l || echo "0")
    local docs_created=$(find . -name "*.md" -mmin -120 2>/dev/null | wc -l || echo "0")
    
    # Create session export file
    cat > "$SESSION_FILE" <<EOF
---
title: Claude Exit Session - $(date '+%Y-%m-%d %H:%M')
date: $(date '+%Y-%m-%d')
time: $(date '+%H:%M:%S')
type: exit_routine
ai_model: claude-3-opus
status: completed
duration: 2+ hours
tasks_completed: ${tasks_completed}
files_modified: ${files_modified}
tags: [claude, exit-routine, knowledge-export]
---

# Claude Session Exit - $(date '+%Y-%m-%d %H:%M')

## Session Overview
- **Start Time**: ${SESSION_START}
- **End Time**: ${SESSION_END}
- **Duration**: Session duration (estimated)
- **Context Usage**: Check current usage before exit

## Session Metrics
- Tasks Completed: ${tasks_completed}
- Files Modified: ${files_modified}
- Documentation Created: ${docs_created}

## Work Completed This Session

### Major Accomplishments
$(if [[ -f "$SUMMARY_FILE" ]]; then
    echo "#### From Previous Summary:"
    cat "$SUMMARY_FILE" 2>/dev/null | head -20
else
    echo "- [Add major accomplishments here]"
    echo "- [List key features implemented]"
    echo "- [Note important decisions made]"
fi)

### Code Changes
\`\`\`
Recent modifications (last 2 hours):
$(find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.sh" -o -name "*.md" \) -mmin -120 2>/dev/null | head -20 || echo "No recent code changes detected")
\`\`\`

### Documentation Updates
$(find . -name "*.md" -mmin -120 2>/dev/null | while read -r file; do
    echo "- \`$(basename "$file")\`: Updated $(date -r "$file" '+%H:%M')"
done | head -10 || echo "- No recent documentation updates")

## Key Decisions & Insights

### Technical Decisions
- [Document any architectural choices]
- [Note technology selections]
- [Record configuration decisions]

### Problem Solutions
- [List problems encountered and solutions]
- [Document workarounds implemented]
- [Note any pending issues]

### Learning Points
- [Key insights gained]
- [Patterns discovered]
- [Tools or techniques learned]

## Environment State

### Active Projects
\`\`\`
$(ls -1 ~/projects/ 2>/dev/null | head -10 || echo "Unable to list projects")
\`\`\`

### Tool Status
- SuperClaude Framework: $(if [[ -d ~/.claude ]]; then echo "✅ Active"; else echo "❌ Not found"; fi)
- Obsidian MCP: $(if [[ -d "$MCP_SERVER_PATH" ]]; then echo "✅ Configured"; else echo "❌ Not configured"; fi)
- Documentation Sync: $(if [[ -f ~/sync_docs_to_obsidian.sh ]]; then echo "✅ Available"; else echo "❌ Not found"; fi)

## Continuation Points

### Next Session Should:
1. [Primary task to continue]
2. [Secondary objectives]
3. [Documentation to update]
4. [Tests to run]

### Open Questions
- [Unresolved questions]
- [Pending decisions]
- [Areas needing research]

### Required Context
- [Critical information for next session]
- [Important file paths]
- [Key configuration details]

## Session Export Details
- **Export Time**: $(date '+%Y-%m-%d %H:%M:%S')
- **Export Location**: \`${SESSION_FILE}\`
- **Sync Status**: Will sync to Obsidian
- **Backup Created**: Yes

---
*Generated by claude_exit_routine.sh v1.0.0*
*Session safely exported for knowledge preservation*
EOF
    
    success "Session export created at: ${SESSION_FILE}"
}

# Create quick summary
create_quick_summary() {
    log "Creating quick summary..."
    
    cat > "$SUMMARY_FILE" <<EOF
# Last Claude Session - $(date '+%Y-%m-%d %H:%M')

## Quick Summary
- Session ended: $(date '+%Y-%m-%d %H:%M:%S')
- Duration: ~2 hours (estimated)
- Export location: ${SESSION_FILE}

## Key Work Items
$(if [[ -f ~/.claude_tasks.log ]]; then
    grep "completed" ~/.claude_tasks.log 2>/dev/null | tail -5 || echo "- No tracked tasks"
else
    echo "- Task tracking not available"
fi)

## Recent Files Modified
$(find . -type f -mmin -120 2>/dev/null | head -10 | while read -r file; do
    echo "- $(basename "$file")"
done || echo "- No recent modifications")

## Continue From Here
- Review: ${SESSION_FILE}
- Next step: Check continuation points in export

---
*Quick reference for session $(date '+%Y-%m-%d')*
EOF
    
    success "Quick summary saved to: ${SUMMARY_FILE}"
}

# Sync documentation to Obsidian
sync_documentation() {
    log "Syncing documentation to Obsidian..."
    
    if [[ -f ~/sync_docs_to_obsidian.sh ]]; then
        info "Running documentation sync..."
        ~/sync_docs_to_obsidian.sh sync 2>&1 | tail -5
        success "Documentation synced to Obsidian"
    else
        warning "Documentation sync script not found"
        info "Skipping documentation sync"
    fi
}

# Export using MCP if available
export_via_mcp() {
    log "Checking MCP server integration..."
    
    if [[ -d "$MCP_SERVER_PATH" ]]; then
        info "MCP server available for enhanced export"
        # Note: Actual MCP export would be triggered from Claude
        success "Ready for MCP-enhanced export"
    else
        info "MCP server not configured - using file export"
    fi
}

# Create exit report
create_exit_report() {
    log "Generating exit report..."
    
    local report_file="${HOME}/claude_exit_report.txt"
    
    cat > "$report_file" <<EOF
================================================================================
                        CLAUDE SESSION EXIT REPORT
================================================================================
Date: $(date '+%Y-%m-%d %H:%M:%S')
Version: claude_exit_routine v1.0.0

SESSION EXPORT
--------------
✓ Session exported to: ${SESSION_FILE}
✓ Quick summary at: ${SUMMARY_FILE}
✓ Documentation synced: $(if [[ -f ~/sync_docs_to_obsidian.sh ]]; then echo "Yes"; else echo "No"; fi)

METRICS
-------
- Tasks Completed: $(grep -c "completed" ~/.claude_tasks.log 2>/dev/null || echo "0")
- Files Modified: $(find . -type f -mmin -120 2>/dev/null | wc -l || echo "0")
- Docs Created: $(find . -name "*.md" -mmin -120 2>/dev/null | wc -l || echo "0")

NEXT STEPS
----------
1. Review session export in Obsidian
2. Check continuation points
3. Resume with: claude --resume ${SESSION_FILE}

STATUS
------
✓ Knowledge preserved
✓ Documentation synced
✓ Ready for session close or compaction

================================================================================
EOF
    
    # Display report
    cat "$report_file"
    
    success "Exit report saved to: ${report_file}"
}

# Clean temporary files
cleanup_temp_files() {
    log "Cleaning temporary files..."
    
    # Clean old backup files
    find /tmp -name "claude_*.tmp" -mtime +7 -delete 2>/dev/null || true
    
    # Clean old session logs
    find ~/.claude_tasks.log.* -mtime +30 -delete 2>/dev/null || true
    
    success "Temporary files cleaned"
}

# Main execution
main() {
    echo -e "${MAGENTA}════════════════════════════════════════════════════════════${NC}"
    echo -e "${MAGENTA}           CLAUDE SESSION EXIT ROUTINE v1.0.0              ${NC}"
    echo -e "${MAGENTA}════════════════════════════════════════════════════════════${NC}"
    echo
    
    # Step 1: Create session export
    create_session_export
    echo
    
    # Step 2: Create quick summary
    create_quick_summary
    echo
    
    # Step 3: Sync documentation
    sync_documentation
    echo
    
    # Step 4: Check MCP integration
    export_via_mcp
    echo
    
    # Step 5: Clean temporary files
    cleanup_temp_files
    echo
    
    # Step 6: Generate exit report
    create_exit_report
    echo
    
    echo -e "${MAGENTA}════════════════════════════════════════════════════════════${NC}"
    echo -e "${GREEN}         SESSION EXIT ROUTINE COMPLETED SUCCESSFULLY        ${NC}"
    echo -e "${MAGENTA}════════════════════════════════════════════════════════════${NC}"
    echo
    echo -e "${CYAN}Your session has been safely exported and preserved.${NC}"
    echo -e "${CYAN}You can now proceed with compaction or session closure.${NC}"
    echo
    echo -e "${YELLOW}To resume this session later, reference:${NC}"
    echo -e "${BLUE}  ${SESSION_FILE}${NC}"
    echo
}

# Handle command line arguments
case "${1:-exit}" in
    exit|export)
        main
        ;;
    quick)
        # Quick export without full sync
        log "Quick export mode..."
        create_session_export
        create_quick_summary
        echo -e "${GREEN}Quick export completed!${NC}"
        ;;
    sync-only)
        # Just sync documentation
        sync_documentation
        ;;
    report)
        # Show last exit report
        if [[ -f "${HOME}/claude_exit_report.txt" ]]; then
            cat "${HOME}/claude_exit_report.txt"
        else
            error "No exit report found"
        fi
        ;;
    help)
        cat <<EOF
Claude Exit Routine - Knowledge preservation before session end

Usage: $0 [command]

Commands:
  exit     - Full exit routine with export and sync (default)
  quick    - Quick export without documentation sync
  sync-only - Only sync documentation to Obsidian
  report   - Display last exit report
  help     - Show this help message

Examples:
  $0              # Run full exit routine
  $0 quick        # Quick export for fast exit
  $0 report       # View last exit report

This routine ensures:
  ✓ Session knowledge is preserved
  ✓ Documentation is synced to Obsidian
  ✓ Continuation points are documented
  ✓ Clean exit or compaction can proceed

For custom slash command, save as: /exit or /save-session

EOF
        ;;
    *)
        error "Unknown command: $1"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac