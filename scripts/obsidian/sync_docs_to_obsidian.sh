#!/usr/bin/env bash
# sync_docs_to_obsidian.sh - Sync project documentation to Obsidian vault
# Version: 1.0.0
# Last Updated: August 15, 2025

set -euo pipefail

# Configuration
OBSIDIAN_VAULT="${HOME}/Obsidian"
PROJECTS_DIR="${HOME}/projects"
AI_TOOLS_DIR="${HOME}/ai-tools"
DOCS_DEST="${OBSIDIAN_VAULT}/Documentation/Projects"
LOG_FILE="${HOME}/.sync_docs.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Document patterns to sync
DOC_PATTERNS=(
    "*.md"
    "*.MD"
    "README*"
    "CHANGELOG*"
    "TODO*"
    "CONTRIBUTING*"
    "LICENSE*"
    "docs/*.md"
    ".claude/*.md"
)

# Exclusions
EXCLUDE_PATTERNS=(
    "node_modules"
    ".git"
    "dist"
    "build"
    "target"
    ".next"
    "coverage"
    "*.backup"
    "*.tmp"
)

# Functions
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$LOG_FILE"
}

# Create destination directories
setup_directories() {
    log "Setting up Obsidian documentation directories..."
    
    mkdir -p "${DOCS_DEST}/active-projects"
    mkdir -p "${DOCS_DEST}/ai-tools"
    mkdir -p "${DOCS_DEST}/environment"
    mkdir -p "${DOCS_DEST}/.archive"
    
    log "Directories created successfully"
}

# Generate exclusion arguments for rsync
generate_exclusions() {
    local exclusions=""
    for pattern in "${EXCLUDE_PATTERNS[@]}"; do
        exclusions="$exclusions --exclude=$pattern"
    done
    echo "$exclusions"
}

# Sync a single project
sync_project() {
    local project_path="$1"
    local project_name=$(basename "$project_path")
    local dest_dir="$2"
    
    info "Syncing ${project_name}..."
    
    # Create project directory in Obsidian
    mkdir -p "${dest_dir}/${project_name}"
    
    # Count documents before sync
    local doc_count=0
    
    # Sync each document pattern
    for pattern in "${DOC_PATTERNS[@]}"; do
        # Use find to locate matching files
        while IFS= read -r -d '' file; do
            # Get relative path from project root
            local rel_path="${file#$project_path/}"
            local dest_file="${dest_dir}/${project_name}/${rel_path}"
            local dest_file_dir=$(dirname "$dest_file")
            
            # Create destination directory if needed
            mkdir -p "$dest_file_dir"
            
            # Copy with metadata preservation
            if cp -p "$file" "$dest_file" 2>/dev/null; then
                ((doc_count++)) || true
            fi
            
        done < <(find "$project_path" -type f -name "$pattern" $(generate_exclusions | xargs printf -- '-not -path "*/%s/*" ') -print0 2>/dev/null)
    done
    
    # Add project metadata file
    create_project_metadata "$project_name" "$dest_dir" "$doc_count"
    
    log "  ✓ Synced ${doc_count} documents from ${project_name}"
}

# Create project metadata file
create_project_metadata() {
    local project_name="$1"
    local dest_dir="$2"
    local doc_count="$3"
    local metadata_file="${dest_dir}/${project_name}/_metadata.md"
    
    cat > "$metadata_file" <<EOF
# Project: ${project_name}

*Last Synced: $(date '+%Y-%m-%d %H:%M:%S')*
*Documents: ${doc_count}*

## Project Location
\`${PROJECTS_DIR}/${project_name}\`

## Synced Documents
This directory contains synchronized documentation from the project repository.

### Document Types
- README files
- API documentation
- Configuration guides
- Architecture documents
- Claude context files

### Sync Configuration
- Auto-sync: Enabled
- Sync frequency: On-demand
- Include subdirectories: Yes

---
*This file is auto-generated by sync_docs_to_obsidian.sh*
EOF
}

# Sync environment documentation
sync_environment_docs() {
    log "Syncing environment documentation..."
    
    local env_docs=(
        "${HOME}/CLAUDE.md"
        "${HOME}/DTAYLOR_ENVIRONMENT.md"
        "${HOME}/STANDARDS_AND_GUIDELINES.md"
        "${HOME}/QUICK_REFERENCE.md"
        "${HOME}/COMPREHENSIVE_ENVIRONMENT.md"
        "${HOME}/FABRIC_SETUP.md"
        "${HOME}/OBSIDIAN_MCP_SETUP.md"
        "${HOME}/OPTIMIZATION_PROPOSAL.md"
    )
    
    local synced=0
    for doc in "${env_docs[@]}"; do
        if [[ -f "$doc" ]]; then
            cp -p "$doc" "${DOCS_DEST}/environment/" 2>/dev/null && ((synced++)) || true
        fi
    done
    
    log "  ✓ Synced ${synced} environment documents"
}

# Sync SuperClaude framework docs
sync_superclaude_docs() {
    log "Syncing SuperClaude Framework documentation..."
    
    local claude_dir="${HOME}/.claude"
    local dest="${DOCS_DEST}/environment/SuperClaude"
    
    if [[ -d "$claude_dir" ]]; then
        mkdir -p "$dest"
        
        # Sync all .md files from .claude/
        local synced=0
        for file in "$claude_dir"/*.md; do
            if [[ -f "$file" ]]; then
                cp -p "$file" "$dest/" 2>/dev/null && ((synced++)) || true
            fi
        done
        
        log "  ✓ Synced ${synced} SuperClaude documents"
    else
        warning "SuperClaude directory not found at ${claude_dir}"
    fi
}

# Generate sync report
generate_report() {
    local report_file="${DOCS_DEST}/_sync_report.md"
    
    cat > "$report_file" <<EOF
# Documentation Sync Report

*Generated: $(date '+%Y-%m-%d %H:%M:%S')*
*Sync Version: 1.0.0*

## Sync Summary

### Projects Synced
\`\`\`
$(ls -1 "${DOCS_DEST}/active-projects/" 2>/dev/null | wc -l) active projects
$(ls -1 "${DOCS_DEST}/ai-tools/" 2>/dev/null | wc -l) AI tools
\`\`\`

### Document Statistics
- Total markdown files: $(find "$DOCS_DEST" -name "*.md" -type f | wc -l)
- Total size: $(du -sh "$DOCS_DEST" | cut -f1)
- Last sync: $(date '+%Y-%m-%d %H:%M:%S')

## Sync Configuration

### Source Directories
- Projects: \`${PROJECTS_DIR}\`
- AI Tools: \`${AI_TOOLS_DIR}\`
- Environment: \`${HOME}\`

### Document Patterns
$(for p in "${DOC_PATTERNS[@]}"; do echo "- \`$p\`"; done)

### Excluded Patterns
$(for p in "${EXCLUDE_PATTERNS[@]}"; do echo "- \`$p\`"; done)

## Next Sync
Run \`~/sync_docs_to_obsidian.sh\` to update documentation.

---
*Automated documentation sync powered by sync_docs_to_obsidian.sh*
EOF
    
    log "Sync report generated at ${report_file}"
}

# Main execution
main() {
    log "===== Starting Documentation Sync to Obsidian ====="
    
    # Check if Obsidian vault exists
    if [[ ! -d "$OBSIDIAN_VAULT" ]]; then
        error "Obsidian vault not found at $OBSIDIAN_VAULT"
    fi
    
    # Setup directories
    setup_directories
    
    # Sync environment docs
    sync_environment_docs
    
    # Sync SuperClaude docs
    sync_superclaude_docs
    
    # Sync projects
    if [[ -d "$PROJECTS_DIR" ]]; then
        log "Syncing project documentation..."
        for project in "$PROJECTS_DIR"/*; do
            if [[ -d "$project" ]]; then
                sync_project "$project" "${DOCS_DEST}/active-projects"
            fi
        done
    else
        warning "Projects directory not found at $PROJECTS_DIR"
    fi
    
    # Sync AI tools
    if [[ -d "$AI_TOOLS_DIR" ]]; then
        log "Syncing AI tools documentation..."
        for tool in "$AI_TOOLS_DIR"/*; do
            if [[ -d "$tool" ]]; then
                sync_project "$tool" "${DOCS_DEST}/ai-tools"
            fi
        done
    else
        warning "AI tools directory not found at $AI_TOOLS_DIR"
    fi
    
    # Generate report
    generate_report
    
    log "===== Documentation Sync Complete ====="
    info "View synced docs at: ${DOCS_DEST}"
}

# Handle arguments
case "${1:-sync}" in
    sync)
        main
        ;;
    clean)
        log "Cleaning old sync data..."
        rm -rf "${DOCS_DEST}/.archive"/*
        log "Clean complete"
        ;;
    report)
        if [[ -f "${DOCS_DEST}/_sync_report.md" ]]; then
            cat "${DOCS_DEST}/_sync_report.md"
        else
            error "No sync report found. Run sync first."
        fi
        ;;
    help)
        cat <<EOF
Usage: $0 [command]

Commands:
  sync    - Sync all documentation to Obsidian (default)
  clean   - Clean archived sync data
  report  - Display last sync report
  help    - Show this help message

Examples:
  $0              # Run sync
  $0 sync         # Explicitly run sync
  $0 report       # View last sync report
  $0 clean        # Clean old data

Configuration:
  Edit script variables to customize paths and patterns.

EOF
        ;;
    *)
        error "Unknown command: $1. Use 'help' for usage."
        ;;
esac